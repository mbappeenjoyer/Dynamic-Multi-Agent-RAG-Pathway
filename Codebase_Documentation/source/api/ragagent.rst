RAG Agent
========

Overview
--------
The RAGAGENT class is designed to process complex queries using a Retrieval-Augmented Generation (RAG) system, integrating thought generation, reasoning, and retrieval with memory management to generate precise, context-aware responses.

Initialization
--------------
.. py:class:: RAGAGENT(llm, embedding_dim=1024, thought_agent_prompt=None, reasoning_agent_prompt=None, retrieval_agent_prompt=None, utility_query_template=None, max_steps=15, similarity_threshold=0.8, retriever = None, path = None)

   Initialize the RAG agent with comprehensive configuration options.

   :param llm: The language model used for query generation and processing.
   :type llm: object
   :param int embedding_dim: Dimension of embedding vectors. Default is 1024.
   :param thought_agent_prompt: Prompt for thought generation phase.
   :type thought_agent_prompt: str, optional
   :param reasoning_agent_prompt: Prompt for reasoning phase.
   :type reasoning_agent_prompt: str, optional
   :param retrieval_agent_prompt: Prompt for retrieval phase.
   :type retrieval_agent_prompt: str, optional
   :param utility_query_template: Template for generating utility queries.
   :type utility_query_template: str, optional
   :param int max_steps: Maximum processing steps for a query. Default is 15.
   :param float similarity_threshold: Threshold for memory similarity. Default is 0.8.
   :param retriever: Raptor Retriever instance.
   :type retriever: object, optional
   :param path: path to the PDF file.
   :type path: str, optional

Methods
-------

.. py:method:: check_memory_and_retrieve(query)

   Checks if a query exists in memory and retrieves the best match based on similarity.

   :param str query: The query string to search in memory.
   :return: The best matching chunk from memory, or `None` if no match is found.
   :rtype: str or None

.. py:method:: check_memory_and_retrieve_for_supervisor(query)

   Retrieves the best match for a query from memory for supervisory tasks.

   :param str query: The query string to search in memory.
   :return: The best matching chunk, or `None` if no match is found.
   :rtype: str or None

.. py:method:: add_to_memory(query, chunk, query_type='original', original_query=None, metadata=None)

   Adds a query and its associated chunk to memory with metadata.

   :param str query: The query string.
   :param str chunk: The chunk of data to store.
   :param str query_type: The type of query (e.g., 'original', 'retrieval'). Default is 'original'.
   :param str original_query: The original query string (optional).
   :param dict metadata: Additional metadata to associate with the chunk (optional).
   :return: `True` if the chunk was successfully added, `False` otherwise.
   :rtype: bool

.. py:method:: get_existing_graph_queries()

   Retrieves all existing graph queries from the memory cache.

   :return: A list of query strings stored in memory.
   :rtype: list

.. py:method:: generate_utility_queries(chunk, max_queries, existing_graph_queries)

   Generates utility queries for a given data chunk.

   :param str chunk: The data chunk for generating queries.
   :param int max_queries: Maximum number of queries to generate.
   :param list existing_graph_queries: List of existing graph queries to avoid duplicates.
   :return: Generated utility queries.
   :rtype: list

.. py:method:: get_embedding(text)

   Generates an embedding vector for a given text.

   :param str text: The input text for which to generate an embedding.
   :return: The generated embedding vector, or `None` if an error occurs.
   :rtype: np.ndarray or None

.. py:method:: print_memory_metadata()

   Prints metadata for all chunks in the memory cache.

.. py:method:: check_query_in_memory(query, threshold=0.9)

   Checks if a query exists in memory using similarity scores.

   :param str query: The query to check.
   :param float threshold: Similarity threshold. Default is 0.9.
   :return: `True` if a similar query exists, `False` otherwise.
   :rtype: bool

.. py:method:: run(retriever, question, reset=None)

   Execute the agent to process a query and generate a response.

   :param retriever: The retrieval engine.
   :type retriever: object
   :param str question: The query to process.
   :param bool reset: Whether to reset the agent's state before running.
   :return: The final answer generated by the agent, or None if processing fails.
   :rtype: str or None

Recommended Usage:

   .. code-block:: python

      agent = RAGAGENT(llm)
      answer = agent.run(retriever, "What is the capital of France?", True)


.. py:method:: step(self)

   Performs a single step in the agent's workflow, which includes thought generation, retrieval, and memory updates.

   **Description**:
      This method manages the core loop of the agent’s query processing, iterating through the different stages like thought generation, retrieval, and reasoning. It triggers retrieval if the agent needs to fetch additional information, processes memory, and updates the agent’s input based on retrieved or reasoned information.

   **Details**:
      - **Thought Generation**: The agent generates thoughts about the current state.
      - **Retrieval**: Based on the generated thought, the agent queries the retrieval system for relevant chunks.
      - **Memory**: Updates the agent’s memory with newly retrieved or reasoned data.
      - **Utility Queries**: If additional context or follow-up information is needed, utility queries are generated.
      - **Reasoning**: If retrieval isn’t sufficient, the agent will initiate reasoning to generate a response.

.. py:method:: jargon_check(self, query)

   Identifies jargon terms in the user’s query.

   :param query: The query to be analyzed for jargon.
   :type query: str
   :return: A list of identified jargon terms, or "None" if no jargon is found.
   :rtype: str

.. py:method:: rephrase(self, query, jargons)

   Rephrases the user's query by defining and explaining identified jargon terms.

   :param query: The original query, potentially containing jargon.
   :type query: str
   :param jargons: A list or string of identified jargon terms that need clarification.
   :type jargons: str
   :return: The rephrased query with clear definitions of jargon terms.
   :rtype: str

.. py:method:: prompt_thought_agent(self)

   Generates the thought process for the agent using the thought agent prompt.

   :return: The generated thought response from the thought agent.
   :rtype: str

.. py:method:: prompt_reasoning_agent(self, force_completion=False)

   Generates reasoning for the agent using the reasoning agent prompt.

   :param force_completion: If `True`, overrides constraints to ensure a response is generated. Default is `False`.
   :type force_completion: bool
   :return: The generated reasoning response from the reasoning agent.
   :rtype: str

.. py:method:: parse_llm_response(self, response, expression)

   Parses the response from the LLM to extract relevant information based on the context.

   :param response: The response string generated by the LLM.
   :type response: str
   :param expression: The expected type of information to extract from the response. Options include `RETRIEVAL THOUGHT`, `REASONING THOUGHT`, `REASONING`, `ACTION`, or `None`.
   :type expression: str or None
   :return: The extracted information from the response, or `None` if no match is found.
   :rtype: str or None

.. py:method:: get_random_questions_from_metadata(self)

   Retrieves random follow-up query suggestions from the memory cache.

   :return: A string of randomly selected follow-up query suggestions, formatted as a numbered list.
   :rtype: str

.. py:method:: __reset_agent(self)

   Resets the agent’s internal state, including input and step count.

   **Description**:
      This private method reinitializes the agent’s internal state to prepare for a fresh query cycle, clearing any existing data from the previous execution.

   **Details**:
      - Resets step count, answer, and input.
      - Clears memory cache and previous queries to ensure no outdated information persists.

Error Handling
--------------
The RAGAgent class implements robust error handling for:

* Query generation failures.
* Retrieval errors due to irrelevant or insufficient data.
* Memory management challenges.

Requirements
------------
* numpy
* json
* re
* A compatible LLM (e.g., OpenAI GPT) for query generation and retrieval.
* An embedding model capable of calculating query similarity.